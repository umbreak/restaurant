package com.restaurant.model;

import java.util.UUID;

/**
 * Size of every instance if table: 2*4 + 16 (object overhead) + 2*36+64= 160 bytes
 */

public class Table implements Comparable<Table>{
    //Size = 2*36+64
    private final String id;
    //Size = 4 byes
    private final int totalSeats;
    //Size = 4 bytes
    private int availableSeats;

    public Table(int size) {
        this.totalSeats = size;
        this.availableSeats=totalSeats;
        id=UUID.randomUUID().toString();
    }

    public int getTotalSeats() {
        return totalSeats;
    }

    public int getAvailableSeats() {
        return availableSeats;
    }

    public void setAvailableSeats(int availableSeats) {
        this.availableSeats = availableSeats;
    }

    public void addAvailableSeats(int number){
        if(number + availableSeats > totalSeats){
            throw new SeatManagerException("Not possible to have more seats in this table than=" + totalSeats);
        }
        availableSeats+=number;
    }
    public void removeAvailableSeats(int number){
        if(availableSeats - number < 0){
            throw new SeatManagerException("Not possible to have less than 0 available seats");
        }
        availableSeats-=number;
    }

    public String getId() {
        return id;
    }
    //Equals and hashcode generated by the IDE


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Table table = (Table) o;

        if (totalSeats != table.totalSeats) return false;
        if (availableSeats != table.availableSeats) return false;
        return id != null ? id.equals(table.id) : table.id == null;

    }

    @Override
    public int hashCode() {
        int result = id != null ? id.hashCode() : 0;
        result = 31 * result + totalSeats;
        result = 31 * result + availableSeats;
        return result;
    }

    public int compareTo(Table o) {
        //This is available form Java 1.7, before use a normal if else comparison
        //or use Integer instead of int
        return Integer.compare(availableSeats,o.availableSeats);
    }


}
